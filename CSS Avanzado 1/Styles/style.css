/* */

:root {
    /*  --nombre-variable */
    --font-primary:'poppins', sans-serif;
    --color-primary: #A60311;
    --color-secondary: #D9042B;
    --color-text-primary: #D9CCB4;
    --color-text-secondary: #D98E04;
    --color-background: #590219;
    --color-light: #F2F2F2;
    --color-dark: #070C26;
}

body{
    background-color:var(--color-background);
    color:var(--color-light);
    font-family:var(--font-primary);
}

/*h2, h3{
    font-family:var(--font-primary);
}*/

.position{
width: 100px;
height: 100px;
background-color: var(--color-dark);
}

/*La posicion estatica es la posicion por default del html, no se afecta por ningun top, bottom, left ni right, solamente con margenes*/
#static{
    position: static;
    top: 20px;/*Nada de esto le afecta a la posision de static*/
    bottom: 20px;/*Nada de esto le afecta a la posision de static*/
    left: 20px;/*Nada de esto le afecta a la posision de static*/
    right: 20px;/*Nada de esto le afecta a la posision de static*/
    background-color: var(--color-text-secondary); 
}

/* Es posicionado de forma relativa al elemento anterior o posicion original y si permite movimiento mediante propiedades top, bottom, left, right */
#relative{
    position: relative;
    top: 1000px;
    right: 30px;
    bottom: 20px;
    left: 30px;
    background-color: var(--color-primary); 
 }

 /*Se posiciona de forma relativa a su ancestro mas cercano y no con respecto al viewport*/
 #absolute{
    position: absolute;
    top:0px;
    left: 200px;
    background-color: var(--color-light); 
    color: var(--color-dark);
 }
/*Este sera el ancestro sobre el cual se movera el hijo*/
 #ancestro{
    position: absolute;
    top: 150px;
    left: 200px;
    width: 200px;
    height: 200px;
    background-color: var(--color-dark);
    border-radius: solid var(--color-light);
 }

/*fixed nos permite mantener el elemento de manera fija en el viewport*/
/* #fixed{
    left: 350px;
    top:500px;
    position: fixed;
    background-color: cadetblue;
}*/

#chat{
    /* border: var(--color-light); */
    position: fixed;
    top:700px;
    left: 370px;
    width: 60px;
    height: 100px;
}

#whatsapp-icon{
    width: 100%;
}

.display-inline{
    /* display: inline; */
    width: 100px;
    height: 100px;
    background-color: var(--color-text-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}

#display-1, #display-4 {
    display: inline;
}

.display-block{
    display: inline-block;
    width: 100px;
    height: 100px;
    background-color: var(--color-secondary);
    text-align: center;
    margin: 2px;

}

@media (max-width:720px){
    .display-none{
        display: none;
    }
}

/* Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
Por default, la dirección de flex es en filas (row).
Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
    > - flex-direction: column, column-reverse, row, row-reverse
    > - flex-wrap: wrap, nowrap, wrap-reverse
    > - aling-self: 
    */

.container {
    display: flex;
    /* flex-direction: row-reverse; */
    /* flex-direction: column-reverse; */
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;
    /* align-items: center; */


    width: auto;
    height: 350px;
    margin: 10px;
    padding: 15px;
    border-radius: 10px;
    background-color: var(--color-text-secondary);
}

.display-flex {
    width: 100px;
    height: 80px;
    margin: 5px;
    padding: 2px;
    text-align: center;
    background-color: var(--color-dark);
    border-radius: 6px;
}

.display-flex {
    display: flex;
    justify-content: center;
    align-items: center;
}

#item-6 {
    align-self: center;
}

a {
    text-decoration: none;
    color: var(--color-light);
}


/*Grid layout
Elementos de una cuadricula grid: contenedor, items'celdas, area
display: grid;
*/
.grid{
    display: grid;
    grid-template-columns: auto;
    gap: 20px;
    padding: 10px;
}

.display-grid{
    background-color: var(--color-text-secondary);
    border-radius: 3px;
    text-align: center;
    border: solid var(--color-dark) 1px;
}

.container-1{
    display:grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 2fr 2fr 1fr;
    grid-template-areas: 
        /* "head head head"
        "aside section section"
        "aside article article"
        "footer footer footer" */
        "head"
        "aside"
        "section"
        "article"
        "footer"
    ;

    width: auto;
    height: 500px;
    border: solid var(--color-text-primary) 1px;
    text-align: center;
    margin: 10px;
    font-size: 18px;

}

header{
    background-color: darkviolet;
    grid-area: head;
}

nav{
    background-color: darkslategray;
    grid-area: nav;
}

aside{
    background-color: seagreen;
    grid-area: aside;
}

section{
    background-color: peru;
    grid-area: section;
}

article{
    background-color: tomato;
    grid-area: article;
}

footer{
    background-color: deepskyblue;
    grid-area: footer
}

